name: Watch Roblox user (only on status change)

on:
  schedule:
    - cron: "*/10 * * * *"   # every 10 minutes
  workflow_dispatch:

permissions:
  contents: write

env:
  USER_ID: "7807146843"
  PLAYER_NAME: "Sleepy"
  PROFILE_URL: "https://www.roblox.com/users/7807146843/profile"

jobs:
  watch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Load last known status
        id: last
        run: |
          mkdir -p .status
          FILE=".status/${USER_ID}.json"
          if [ -f "$FILE" ]; then
            LAST_STATUS=$(jq -r '.status' "$FILE")
          else
            LAST_STATUS="unknown"
          fi
          echo "last_status=$LAST_STATUS" >> $GITHUB_OUTPUT

      - name: Fetch current presence from Roblox
        id: now
        run: |
          DATA=$(curl -s -X POST https://presence.roblox.com/v1/presence/users \
            -H "Content-Type: application/json" \
            -d "{\"userIds\":[${USER_ID}]}")

          echo "$DATA" > data.json
          STATUS=$(jq -r '.userPresences[0].userPresenceType' data.json)
          PLACE_ID=$(jq -r '.userPresences[0].placeId // empty' data.json)

          case "$STATUS" in
            0) STATUS_NAME="OFFLINE" ;;
            1) STATUS_NAME="ONLINE" ;;
            2) STATUS_NAME="IN_GAME" ;;
            3) STATUS_NAME="IN_STUDIO" ;;
            *) STATUS_NAME="UNKNOWN" ;;
          esac

          echo "status_name=$STATUS_NAME" >> $GITHUB_OUTPUT
          echo "status_raw=$STATUS" >> $GITHUB_OUTPUT
          echo "place_id=$PLACE_ID" >> $GITHUB_OUTPUT

      - name: Check if status changed
        id: decide
        run: |
          if [ "${{ steps.now.outputs.status_name }}" != "${{ steps.last.outputs.last_status }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord message if changed
        if: steps.decide.outputs.changed == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          PLAYER_NAME: ${{ env.PLAYER_NAME }}
          PROFILE_URL: ${{ env.PROFILE_URL }}
          STATUS_NAME: ${{ steps.now.outputs.status_name }}
          STATUS_RAW: ${{ steps.now.outputs.status_raw }}
          PLACE_ID: ${{ steps.now.outputs.place_id }}
        run: |
          if [ "$STATUS_RAW" = "2" ] && [ -n "$PLACE_ID" ]; then
            JOIN_BTN='{ "type": 2, "style": 5, "label": "Join Game", "url": "https://www.roblox.com/games/'"$PLACE_ID"'" }'
          else
            JOIN_BTN=""
          fi

          if [ -n "$JOIN_BTN" ]; then
            COMPONENTS='{
              "type": 1,
              "components": [
                '"$JOIN_BTN"',
                { "type": 2, "style": 5, "label": "View Profile", "url": "'"$PROFILE_URL"'" }
              ]
            }'
          else
            COMPONENTS='{
              "type": 1,
              "components": [
                { "type": 2, "style": 5, "label": "View Profile", "url": "'"$PROFILE_URL"'" }
              ]
            }'
          fi

          case "$STATUS_NAME" in
            "IN_GAME"|"ONLINE") COLOR=3066993 ;;
            "OFFLINE") COLOR=15158332 ;;
            *) COLOR=9807270 ;;
          esac

          cat > payload.json <<EOF
{
  "embeds": [
    {
      "title": "${PLAYER_NAME} is now ${STATUS_NAME}",
      "description": "Click below for profile${JOIN_BTN:+ or to join.}",
      "color": ${COLOR},
      "url": "${PROFILE_URL}"
    }
  ],
  "components": [ ${COMPONENTS} ]
}
EOF

          curl -s -H "Content-Type: application/json" -X POST -d @payload.json "$DISCORD_WEBHOOK" -o /dev/null

      - name: Update saved status
        if: steps.decide.outputs.changed == 'true'
        run: |
          mkdir -p .status
          printf '{ "status": "%s", "ts": "%s", "placeId": "%s" }\n' \
            "${{ steps.now.outputs.status_name }}" \
            "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            "${{ steps.now.outputs.place_id }}" > ".status/${USER_ID}.json"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .status/${USER_ID}.json
          git commit -m "Update ${USER_ID} status -> ${{ steps.now.outputs.status_name }}" || echo "No change"
          git push
